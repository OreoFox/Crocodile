<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crocodile</title>
</head>
<body>
    <div class="canv">
        {{!-- Main game canvas --}}
        <p id="holder"><svg class="erase" id="eraser" enable-background="new 0 0 300 300" height="512" viewBox="0 0 300 300" width="512" xmlns="http://www.w3.org/2000/svg"><g><g fill="#4c241d"><path d="m57.656 71.656c-1.023 0-2.047-.391-2.828-1.172l-11.312-11.312c-1.562-1.562-1.562-4.094 0-5.656s4.094-1.562 5.656 0l11.312 11.312c1.562 1.562 1.562 4.094 0 5.656-.781.782-1.804 1.172-2.828 1.172z"/><path d="m46.344 71.656c-1.023 0-2.047-.391-2.828-1.172-1.562-1.562-1.562-4.094 0-5.656l11.312-11.312c1.562-1.562 4.094-1.562 5.656 0s1.562 4.094 0 5.656l-11.312 11.312c-.781.782-1.805 1.172-2.828 1.172z"/><circle cx="68" cy="230" r="4"/><circle cx="188" cy="242" r="4"/><circle cx="212" cy="222" r="4"/><circle cx="232" cy="234" r="4"/><circle cx="60" cy="206" r="4"/></g><circle cx="178" cy="124" fill="#ffc7c7" r="86"/><path d="m248 262h-208c-2.211 0-4-1.791-4-4s1.789-4 4-4h208c2.211 0 4 1.791 4 4s-1.789 4-4 4z" fill="#4c241d"/><path d="m100 86c-2.211 0-4-1.791-4-4v-12c0-2.209 1.789-4 4-4s4 1.791 4 4v12c0 2.209-1.789 4-4 4z" fill="#4c241d"/><path d="m100 114c-2.211 0-4-1.791-4-4v-12c0-2.209 1.789-4 4-4s4 1.791 4 4v12c0 2.209-1.789 4-4 4z" fill="#4c241d"/><path d="m92 94h-12c-2.211 0-4-1.791-4-4s1.789-4 4-4h12c2.211 0 4 1.791 4 4s-1.789 4-4 4z" fill="#4c241d"/><path d="m120 94h-12c-2.211 0-4-1.791-4-4s1.789-4 4-4h12c2.211 0 4 1.791 4 4s-1.789 4-4 4z" fill="#4c241d"/><path d="m164 70c-6.617 0-12-5.383-12-12s5.383-12 12-12 12 5.383 12 12-5.383 12-12 12zm0-16c-2.207 0-4 1.795-4 4s1.793 4 4 4 4-1.795 4-4-1.793-4-4-4z" fill="#4c241d"/><g><path d="m195.113 201.113-62.225-62.225 49.296-49.296c7.141-7.141 18.718-7.141 25.859 0l36.367 36.367c7.141 7.141 7.141 18.718 0 25.859z" fill="#6b4f5b"/><path d="m195.113 205.113c-1.023 0-2.047-.391-2.828-1.172l-62.227-62.227c-.75-.75-1.172-1.768-1.172-2.828s.422-2.078 1.172-2.828l49.297-49.295c8.688-8.688 22.828-8.691 31.516 0l36.367 36.365c8.688 8.689 8.688 22.826 0 31.516l-49.297 49.297c-.781.782-1.804 1.172-2.828 1.172zm-56.57-66.226 56.57 56.57 46.469-46.469c5.57-5.57 5.57-14.633 0-20.203l-36.367-36.365c-5.574-5.574-14.637-5.57-20.203 0z" fill="#4c241d"/></g><g><path d="m111.549 242h42.676l40.887-40.888-62.226-62.225-49.296 49.296c-7.141 7.141-7.141 18.718 0 25.859z" fill="#fff"/><path d="m154.227 246h-42.676c-1.062 0-2.078-.422-2.828-1.172l-27.961-27.957c-8.688-8.689-8.688-22.826 0-31.516l49.297-49.297c1.562-1.562 4.094-1.562 5.656 0l62.227 62.227c1.562 1.562 1.562 4.094 0 5.656l-40.887 40.887c-.75.75-1.766 1.172-2.828 1.172zm-41.02-8h39.363l36.887-36.887-56.57-56.57-46.469 46.469c-5.57 5.57-5.57 14.633 0 20.203z" fill="#4c241d"/></g></g></svg></p>
        <canvas id="canv" width="1400" height="288" class="canvas" oncontextmenu="return false"></canvas>
    </div>
    
    <div class="nowdrawing" id="nowdrawing">
        {{!-- How draw right now and his theme --}}
    </div>

    <div class="chat">
        {{!-- Users chat --}}
        <div id="form">
            <form id="dm" action="/postcomment" method="post">
                <div class="flex">
                    <input type="text" name="comment" id="comm" autocomplete="off">
                    <input type="text" name="nickname" class="hidden" id="namefield">
                    <input type="submit" value="Отправить">
                </div>
            </form>
        </div>
        <div class="box" id="box">
            {{!-- Here goes messages from players --}}
        </div>
    </div>
</body>
{{!-- Soket.io library --}}
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.0/socket.io.js" integrity="sha512-+l9L4lMTFNy3dEglQpprf7jQBhQsQ3/WvOnjaN/+/L4i0jOstgScV0q2TjfvRF4V+ZePMDuZYIQtg5T4MKr+MQ==" crossorigin="anonymous"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
{{!-- Custom JS --}}
<script>
    // Defining variables
    let socket = io.connect();
    let main = document.getElementById('main');
    let canvas = document.getElementById('canv');
    let chat = document.getElementById('box');
    let form = document.getElementById('form');
    let comment = document.getElementById('comm');
    let nd = document.getElementById('nowdrawing');
    let namefield = document.getElementById('namefield');
    let dm = document.getElementById('dm');
    let erase = document.getElementById('holder');
    let rectSize = 5;
    let fill = false;
    let ctx = canvas.getContext('2d');
    let isDrawing = false;

    // Set name list
    let names = ['Horny', 'Dick', 'LoveDicks', 'Sucking', 'Cumming', 'YourClubBoddy', 'GachiBoy', 'LoveFisting', 'LoveAnal']
    let name = '';
    let num = Math.floor(Math.random() * names.length);
    let id = Math.floor(Math.random() * 10000);
    // Set current name
    name = names[num];
    let data = {
        "name": name,
        "id": id
    }

    erase.addEventListener('click', e => {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        socket.emit('clear', name);
    });

    socket.on('clear', data => {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    })

    $('#dm').submit(function(e){
        e.preventDefault();
        $.ajax({
            url:'/postcomment',
            type:'post',
            data:$('#dm').serialize(),
            success:function(){
                return;
            }
        });
    });

    // Emmit name to server
    socket.emit('setname', data);
    namefield.value = name;

    // Update Name If Exist
    socket.on('changeName', (data) => {
        if (id == data.id) {
            name = data.name;
            namefield.value = data.name;
        } else {
            namefield.value = name;
        }
    });

    // Post Comment
    socket.on('comment', (data) => {
        let child = document.createElement("div");
        child.innerHTML = "<div class=\"message\"><hr><p>" + data.name + "</p><p>" + data.comment + "</p><hr></div>"
        chat.append(child);
        if (chat.firstChild) {
            chat.insertBefore(child, chat.firstChild);
        }
        comment.value = '';
        socket.emit('comment', data.comment);
    });

    // New drawer cames here
    socket.on('changeDrawer', (data) => {
        console.log(data, name)
        if (name == data.drawer) {
            nd.innerHTML = "<hr>Now Drawing: You<hr><p>" + data.theme + "</p>"
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            socket.emit('clear', name);
            setInterval(() => {
                let imgdata = canvas.toDataURL();
                let data = {
                    "img": imgdata,
                    "name": name
                }
                socket.emit('image', data);
            }, 100);
            return isDrawing = true;
        } else {
            nd.innerHTML = "<hr>Now Drawing: " + data.drawer + "<hr>"
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            socket.emit('clear', name);
            return isDrawing = false;
        }
        
    });

    // Check how currently draw
    socket.on('amIDraw', (data) => {
        if (name == data) {
            form.style.setProperty("display", "none");
            erase.style.setProperty("display", "inherit");
        } else {
            form.style.setProperty("display", "inherit");
            erase.style.setProperty("display", "none");
        }
    });

    //On Win action
    socket.on('win', (data) => {
        chat.innerHTML = "";
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        socket.emit('clear', name);
    });

    // Update Canvas
    socket.on('draw', (data) => {
        let image = new Image();
        image.src = data;
        ctx.drawImage(image, 0, 0);
    });

    // Draw functions
    canvas.addEventListener('mousedown', ev => {
        if (ev.which == 3) {
            ctx.fillStyle = '#EFF7CF';
        } else if (ev.which == 1) {
            ctx.fillStyle = '#111111';
        }
        fill = true;
    })

    canvas.addEventListener('mouseup', ev => {
        fill = false;
    })

    canvas.addEventListener('mouseout', ev => {
        fill = false;
    })

    canvas.addEventListener('mousemove', e => {
        if (fill) {
            if (isDrawing) {
                ctx.fillRect(e.clientX - 3, e.clientY - 19, rectSize, rectSize);
            }
        }
    })
</script>

<style>
    body {
        margin: 0;
        padding: 0;
        background: #EFF7CF;
        font-family: sans-serif;
    }

    .erase {
        position: absolute;
        left: 92%;
        bottom: 60%;
        width: 5%;
    }

    .hidden {
        display: none;
    }

    .nowdrawing {
        text-align: center;
    }

    .canvas {
        border-radius: 2%;
        border-color: black;
        border: solid;
        cursor: crosshair;
    }

    .box {
        margin: 5%;
        border-radius: 2%;
        border-color: black;
        border: solid;
        width: 90%;
        height: 90%;
    }

    .message {
        margin: 5%;
    }

    .chat {
        text-align: center;
    }
</style>

</html>